import React, { Component } from "react";
import { connect } from "react-redux";
import { toggleTodo } from "../actions";
import { withRouter } from "react-router-dom";
import TodoList from "../components/TodoList";
import { getVisibleTodos } from "../reducers";
import { fetchTodos } from "../api";

// you cannot override the componentDidMount life cycle method of a generated component
// (generated by wrappers like connect/withRouter)
// so the solution is to create a new react component
class VisibleTodoList extends Component {
  //this method runs only once - when the component is first rendered
  componentDidMount() {
    fetchTodos(this.props.filter).then(todos =>
      console.log(this.props.filter, todos)
    );
  }

  componentDidUpdate(prevProps) {
    if (this.props.filter !== prevProps.filter) {
      fetchTodos(this.props.filter).then(todos =>
        console.log(this.props.filter, todos)
      );
    }
  }

  render() {
    return <TodoList {...this.props} />;
  }
}

const mapStateToProps = (state, { match }) => {
  const filter = match.params.filter || "all";

  return {
    filter,
    todos: getVisibleTodos(state, filter)
  };
};

// const mapDispatchToProps = dispatch => ({
//   onTodoClick(id) {
//     dispatch(toggleTodo(id));
//   }
// });

// 'withRouter' is used to get access to the router/url params
// withRouter and connect inject additional props to the presentational component
export default (VisibleTodoList = withRouter(
  connect(
    mapStateToProps,
    // mapDispatchToProps
    // if the arguments passed to the callback props match the arguments passed to the action
    // creator, then we can use this shorthand version of mapping dispatch to props
    { onTodoClick: toggleTodo }
  )(VisibleTodoList)
));
