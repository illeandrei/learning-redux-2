import React, { Component } from "react";
import { connect } from "react-redux";
import { withRouter } from "react-router-dom";
import * as actions from "../actions";
import { getVisibleTodos } from "../reducers";
import TodoList from "../components/TodoList";

// you cannot override the componentDidMount life cycle method of a generated component
// (generated by wrappers like connect/withRouter)
// so the solution is to create a new react component
class VisibleTodoList extends Component {
  //this method runs only once - when the component is first rendered
  componentDidMount() {
    this.fetchData();
  }

  componentDidUpdate(prevProps) {
    if (this.props.filter !== prevProps.filter) {
      this.fetchData();
    }
  }

  fetchData() {
    const { filter, fetchTodos } = this.props;
    fetchTodos(filter);
  }

  render() {
    const { toggleTodo, ...rest } = this.props;
    return <TodoList onTodoClick={toggleTodo} {...rest} />;
  }
}

const mapStateToProps = (state, { match }) => {
  const filter = match.params.filter || "all";

  return {
    filter,
    todos: getVisibleTodos(state, filter)
  };
};

// 'withRouter' is used to get access to the router/url params
// withRouter and connect inject additional props to the presentational component
VisibleTodoList = withRouter(
  connect(
    mapStateToProps,
    actions
  )(VisibleTodoList)
);

export default VisibleTodoList;
